import { useState, useRef } from "react";

const UnifiedLegalApp = ({ language }) => {
  const [inputMode, setInputMode] = useState("text"); // text | voice
  const [queryType, setQueryType] = useState("complaint"); // complaint | query
  const [content, setContent] = useState("");
  const [locationState, setLocationState] = useState("");
  const [evidence, setEvidence] = useState([]);
  const [aggravating, setAggravating] = useState([]);
  const [enableTTS, setEnableTTS] = useState(false);

  // Voice recording
  const [permission, setPermission] = useState(false);
  const [recording, setRecording] = useState(false);
  const [audioBlob, setAudioBlob] = useState(null);
  const [audioURL, setAudioURL] = useState("");

  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);

  const mediaRecorderRef = useRef(null);
  const audioChunksRef = useRef([]);

  const translations = {
    english: {
      inputMode: "Input Method",
      typeText: "Type Text",
      speakVoice: "Speak Voice",
      queryType: "Query Type",
      complaint: "Complaint (Get Sections)",
      legalQuery: "Legal Question (Get Answer)",
      contentLabel: "Describe your complaint or ask your question",
      location: "Location (State/UT)",
      evidence: "Evidence Available",
      aggravating: "Aggravating Factors",
      enableTTS: "Enable Text-to-Speech",
      getMic: "Get Microphone Permission",
      startRec: "Start Recording",
      stopRec: "Stop Recording",
      transcribe: "Transcribe & Analyze",
      submit: "Submit Legal Request",
      processing: "Processing...",
      noAudio: "No audio recorded",
      error: "Error",
      results: "Legal Analysis Results",
      summary: "Summary",
      provisions: "Applicable Provisions",
      judgments: "Similar Judgments",
      answer: "Answer",
      guidance: "Procedural Guidance",
      confidence: "Confidence Level",
    },
    hindi: {
      inputMode: "‡§á‡§®‡§™‡•Å‡§ü ‡§µ‡§ø‡§ß‡§ø",
      typeText: "‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç",
      speakVoice: "‡§Ü‡§µ‡§æ‡§ú‡§º ‡§¨‡•ã‡§≤‡•á‡§Ç",
      queryType: "‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞",
      complaint: "‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ (‡§ß‡§æ‡§∞‡§æ‡§è‡§Å ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç)",
      legalQuery: "‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä ‡§™‡•ç‡§∞‡§∂‡•ç‡§® (‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç)",
      contentLabel: "‡§Ö‡§™‡§®‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ï‡§æ ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç",
      location: "‡§∏‡•ç‡§•‡§æ‡§® (‡§∞‡§æ‡§ú‡•ç‡§Ø/‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞ ‡§∂‡§æ‡§∏‡§ø‡§§ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂)",
      evidence: "‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§∏‡§æ‡§ï‡•ç‡§∑‡•ç‡§Ø",
      aggravating: "‡§â‡§§‡•ç‡§§‡•á‡§ú‡§ï ‡§ï‡§æ‡§∞‡§ï",
      enableTTS: "‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü-‡§ü‡•Ç-‡§∏‡•ç‡§™‡•Ä‡§ö ‡§∏‡§ï‡•ç‡§∑‡§Æ ‡§ï‡§∞‡•á‡§Ç",
      getMic: "‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã‡§´‡§º‡•ã‡§® ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç",
      startRec: "‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§™‡•ç‡§∞‡§æ‡§∞‡§Ç‡§≠ ‡§ï‡§∞‡•á‡§Ç",
      stopRec: "‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§∞‡•ã‡§ï‡•á‡§Ç",
      transcribe: "‡§ü‡•ç‡§∞‡§æ‡§Ç‡§∏‡§ï‡•ç‡§∞‡§æ‡§á‡§¨ ‡§î‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç",
      submit: "‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç",
      processing: "‡§™‡•ç‡§∞‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£...",
      noAudio: "‡§ï‡•ã‡§à ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ",
      error: "‡§§‡•ç‡§∞‡•Å‡§ü‡§ø",
      results: "‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ",
      summary: "‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂",
      provisions: "‡§≤‡§æ‡§ó‡•Ç ‡§™‡•ç‡§∞‡§æ‡§µ‡§ß‡§æ‡§®",
      judgments: "‡§∏‡§Æ‡§æ‡§® ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø",
      answer: "‡§â‡§§‡•ç‡§§‡§∞",
      guidance: "‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ï ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®",
      confidence: "‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏ ‡§∏‡•ç‡§§‡§∞",
    },
    tamil: {
      inputMode: "‡Æâ‡Æ≥‡Øç‡Æ≥‡ØÄ‡Æü‡Øç‡Æü‡ØÅ ‡ÆÆ‡ØÅ‡Æ±‡Øà",
      typeText: "‡Æâ‡Æ∞‡Øà‡ÆØ‡Øà ‡Æ§‡Æü‡Øç‡Æü‡Æö‡Øç‡Æö‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç",
      speakVoice: "‡Æï‡ØÅ‡Æ∞‡Æ≤‡Øç ‡Æ™‡Øá‡Æö‡Æµ‡ØÅ‡ÆÆ‡Øç",
      queryType: "‡Æµ‡Æø‡Æ©‡Æµ‡Æ≤‡Øç ‡Æµ‡Æï‡Øà",
      complaint: "‡Æ™‡ØÅ‡Æï‡Ææ‡Æ∞‡Øç (‡Æ™‡Æø‡Æ∞‡Æø‡Æµ‡ØÅ‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡ØÜ‡Æ±‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç)",
      legalQuery: "‡Æö‡Æü‡Øç‡Æü ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø (‡Æ™‡Æ§‡Æø‡Æ≤‡Øà‡Æ™‡Øç ‡Æ™‡ØÜ‡Æ±‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç)",
      contentLabel:
        "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡ØÅ‡Æï‡Ææ‡Æ∞‡Øà ‡Æµ‡Æø‡Æµ‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø‡ÆØ‡Øà‡Æï‡Øç ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç",
      location: "‡Æá‡Æü‡ÆÆ‡Øç (‡ÆÆ‡Ææ‡Æ®‡Æø‡Æ≤‡ÆÆ‡Øç/‡ÆØ‡ØÇ‡Æ©‡Æø‡ÆØ‡Æ©‡Øç ‡Æ™‡Æø‡Æ∞‡Æ§‡Øá‡Æö‡ÆÆ‡Øç)",
      evidence: "‡Æï‡Æø‡Æü‡Øà‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æö‡Ææ‡Æ©‡Øç‡Æ±‡ØÅ‡Æï‡Æ≥‡Øç",
      aggravating: "‡ÆÆ‡Øã‡Æö‡ÆÆ‡Ææ‡Æ© ‡Æï‡Ææ‡Æ∞‡Æ£‡Æø‡Æï‡Æ≥‡Øç",
      enableTTS: "‡Æâ‡Æ∞‡Øà-‡Æï‡Øç‡Æï‡ØÅ-‡Æ™‡Øá‡Æö‡Øç‡Æö‡Øà ‡Æá‡ÆØ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
      getMic: "‡ÆÆ‡Øà‡Æï‡Øç‡Æ∞‡Øã‡ÆÉ‡Æ™‡Øã‡Æ©‡Øç ‡ÆÖ‡Æ©‡ØÅ‡ÆÆ‡Æ§‡Æø ‡Æ™‡ØÜ‡Æ±‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç",
      startRec: "‡Æ™‡Æ§‡Æø‡Æµ‡Øà‡Æ§‡Øç ‡Æ§‡Øä‡Æü‡Æô‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
      stopRec: "‡Æ™‡Æ§‡Æø‡Æµ‡Øà ‡Æ®‡Æø‡Æ±‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç",
      transcribe: "‡Æ™‡Æü‡Æø‡ÆØ‡ØÜ‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ ‡Æ™‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡ÆØ‡Øç‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç",
      submit: "‡Æö‡Æü‡Øç‡Æü ‡Æï‡Øã‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà‡ÆØ‡Øà ‡Æö‡ÆÆ‡Æ∞‡Øç‡Æ™‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
      processing: "‡Æö‡ØÜ‡ÆØ‡Æ≤‡Ææ‡Æï‡Øç‡Æï‡ÆÆ‡Øç...",
      noAudio: "‡ÆÜ‡Æü‡Æø‡ÆØ‡Øã ‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æ™‡Øç‡Æ™‡Æü‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà",
      error: "‡Æ™‡Æø‡Æ¥‡Øà",
      results: "‡Æö‡Æü‡Øç‡Æü ‡Æ™‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡ÆØ‡Øç‡Æµ‡ØÅ ‡ÆÆ‡ØÅ‡Æü‡Æø‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç",
      summary: "‡Æö‡ØÅ‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ÆÆ‡Øç",
      provisions: "‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ‡ÆÆ‡Øç ‡Æµ‡Æø‡Æ§‡Æø‡Æï‡Æ≥‡Øç",
      judgments: "‡Æí‡Æ§‡Øç‡Æ§ ‡Æ§‡ØÄ‡Æ∞‡Øç‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç",
      answer: "‡Æ™‡Æ§‡Æø‡Æ≤‡Øç",
      guidance: "‡Æ®‡Æü‡Øà‡ÆÆ‡ØÅ‡Æ±‡Øà ‡Æµ‡Æ¥‡Æø‡Æï‡Ææ‡Æü‡Øç‡Æü‡ØÅ‡Æ§‡Æ≤‡Øç",
      confidence: "‡Æ®‡ÆÆ‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Øà ‡Æ®‡Æø‡Æ≤‡Øà",
    },
  };

  const t = translations[language];

  const evidenceOptions = [
    "CCTV",
    "eyewitness",
    "medical report",
    "device logs",
    "FSL",
    "call detail records",
  ];
  const aggravatingOptions = [
    "weapon",
    "minor victim",
    "habitual offender",
    "conspiracy",
    "hurt",
  ];

  const getMicrophonePermission = async () => {
    try {
      await navigator.mediaDevices.getUserMedia({ audio: true });
      setPermission(true);
    } catch (err) {
      alert(`Error: ${err.message}`);
    }
  };

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream, {
        mimeType: "audio/webm",
      });

      mediaRecorderRef.current = mediaRecorder;
      audioChunksRef.current = [];

      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) audioChunksRef.current.push(event.data);
      };

      mediaRecorder.onstop = () => {
        const blob = new Blob(audioChunksRef.current, { type: "audio/webm" });
        setAudioBlob(blob);
        setAudioURL(URL.createObjectURL(blob));
        stream.getTracks().forEach((track) => track.stop());
      };

      mediaRecorder.start();
      setRecording(true);
    } catch (err) {
      alert(`Error: ${err.message}`);
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && recording) {
      mediaRecorderRef.current.stop();
      setRecording(false);
    }
  };

  const transcribeAudio = async () => {
    if (!audioBlob) {
      alert(t.noAudio);
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const formData = new FormData();
      formData.append("audio", audioBlob, "recording.webm");
      formData.append("language", language);

      const response = await fetch("http://localhost:5000/api/transcribe", {
        method: "POST",
        body: formData,
      });

      const data = await response.json();

      if (data.success) {
        setContent(data.transcription);
      } else {
        setError(data.error);
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const submitLegalRequest = async () => {
    if (!content.trim()) {
      alert("Please provide content");
      return;
    }

    setLoading(true);
    setResult(null);
    setError(null);

    try {
      const response = await fetch("http://localhost:5000/api/legal", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          narrative: content,
          location_state: locationState,
          evidence_available: evidence,
          aggravating_factors: aggravating,
          language: language,
          is_complaint: queryType === "complaint",
          enableTTS: enableTTS,
        }),
      });

      const data = await response.json();

      if (data.success) {
        setResult(data);
      } else {
        setError(data.error);
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="unified-container">
      {/* Input Mode Selection */}
      <div className="mode-selector">
        <label>{t.inputMode}:</label>
        <div className="button-group">
          <button
            className={inputMode === "text" ? "active" : ""}
            onClick={() => setInputMode("text")}
          >
            üìù {t.typeText}
          </button>
          <button
            className={inputMode === "voice" ? "active" : ""}
            onClick={() => setInputMode("voice")}
          >
            üéôÔ∏è {t.speakVoice}
          </button>
        </div>
      </div>

      {/* Query Type Selection */}
      <div className="mode-selector">
        <label>{t.queryType}:</label>
        <div className="button-group">
          <button
            className={queryType === "complaint" ? "active" : ""}
            onClick={() => setQueryType("complaint")}
          >
            ‚öñÔ∏è {t.complaint}
          </button>
          <button
            className={queryType === "query" ? "active" : ""}
            onClick={() => setQueryType("query")}
          >
            ‚ùì {t.legalQuery}
          </button>
        </div>
      </div>

      {/* Voice Input */}
      {inputMode === "voice" && (
        <div className="voice-section">
          {!permission ? (
            <button onClick={getMicrophonePermission} className="submit-btn">
              üé§ {t.getMic}
            </button>
          ) : (
            <>
              <button
                onClick={recording ? stopRecording : startRecording}
                className={`submit-btn ${recording ? "recording" : ""}`}
              >
                {recording ? `‚èπÔ∏è ${t.stopRec}` : `üéôÔ∏è ${t.startRec}`}
              </button>
              {audioURL && <audio src={audioURL} controls />}
              {audioBlob && (
                <button
                  onClick={transcribeAudio}
                  className="submit-btn"
                  disabled={loading}
                >
                  {loading ? t.processing : `üìù ${t.transcribe}`}
                </button>
              )}
            </>
          )}
        </div>
      )}

      {/* Text Input */}
      <div className="form-group">
        <label>{t.contentLabel}:</label>
        <textarea
          value={content}
          onChange={(e) => setContent(e.target.value)}
          rows={6}
          placeholder={
            language === "hindi"
              ? "‡§Ø‡§π‡§æ‡§Å ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç..."
              : language === "tamil"
              ? "‡Æá‡Æô‡Øç‡Æï‡Øá ‡Æ§‡Æü‡Øç‡Æü‡Æö‡Øç‡Æö‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç..."
              : "Type here..."
          }
        />
      </div>

      {/* Additional Fields for Complaints */}
      {queryType === "complaint" && (
        <>
          <div className="form-group">
            <label>{t.location}:</label>
            <input
              type="text"
              value={locationState}
              onChange={(e) => setLocationState(e.target.value)}
              placeholder="Delhi, Maharashtra..."
            />
          </div>

          <div className="form-group">
            <label>{t.evidence}:</label>
            <div className="chip-group">
              {evidenceOptions.map((item) => (
                <button
                  key={item}
                  onClick={() =>
                    setEvidence((prev) =>
                      prev.includes(item)
                        ? prev.filter((e) => e !== item)
                        : [...prev, item]
                    )
                  }
                  className={`chip ${evidence.includes(item) ? "active" : ""}`}
                >
                  {evidence.includes(item) && "‚úì "}
                  {item}
                </button>
              ))}
            </div>
          </div>

          <div className="form-group">
            <label>{t.aggravating}:</label>
            <div className="chip-group">
              {aggravatingOptions.map((item) => (
                <button
                  key={item}
                  onClick={() =>
                    setAggravating((prev) =>
                      prev.includes(item)
                        ? prev.filter((a) => a !== item)
                        : [...prev, item]
                    )
                  }
                  className={`chip aggravating ${
                    aggravating.includes(item) ? "active" : ""
                  }`}
                >
                  {aggravating.includes(item) && "‚úì "}
                  {item}
                </button>
              ))}
            </div>
          </div>
        </>
      )}

      <div className="form-group checkbox-group">
        <label>
          <input
            type="checkbox"
            checked={enableTTS}
            onChange={(e) => setEnableTTS(e.target.checked)}
          />
          üîä {t.enableTTS}
        </label>
      </div>

      <button
        onClick={submitLegalRequest}
        disabled={loading || !content.trim()}
        className="submit-btn"
      >
        {loading ? `‚è≥ ${t.processing}` : `‚öñÔ∏è ${t.submit}`}
      </button>

      {error && (
        <div className="error-box">
          <h3>‚ùå {t.error}</h3>
          <p>{error}</p>
        </div>
      )}

      {result && result.legal_analysis && (
        <div className="result-box">
          <h3>‚úÖ {t.results}</h3>

          {result.query_type === "complaint" ? (
            <>
              {result.legal_analysis.summary && (
                <div className="result-section">
                  <h4>{t.summary}</h4>
                  <p>{result.legal_analysis.summary}</p>
                </div>
              )}

              <div className="result-section">
                <h4>
                  {t.provisions} (
                  {result.legal_analysis.applicable_provisions?.length || 0})
                </h4>
                {result.legal_analysis.applicable_provisions?.map(
                  (provision, idx) => (
                    <div key={idx} className="provision-card">
                      <h5>
                        {provision.statute} - Section {provision.section}
                      </h5>
                      <p>
                        <strong>{provision.description}</strong>
                      </p>
                      <p>{provision.provision_text}</p>
                      <p>
                        <strong>Punishment:</strong>{" "}
                        {provision.punishment_range}
                      </p>
                      <a
                        href={provision.source_url}
                        target="_blank"
                        rel="noopener noreferrer"
                      >
                        üìÑ View Source
                      </a>
                    </div>
                  )
                )}
              </div>

              {result.legal_analysis.similar_judgments && (
                <div className="result-section">
                  <h4>
                    {t.judgments} (
                    {result.legal_analysis.similar_judgments.length})
                  </h4>
                  {result.legal_analysis.similar_judgments.map(
                    (judgment, idx) => (
                      <div key={idx} className="case-card">
                        <h5>{judgment.citation}</h5>
                        <p>
                          <strong>
                            {judgment.court} ({judgment.year})
                          </strong>
                        </p>
                        <p>{judgment.holding}</p>
                        <a
                          href={judgment.source_url}
                          target="_blank"
                          rel="noopener noreferrer"
                        >
                          üìÑ View Judgment
                        </a>
                      </div>
                    )
                  )}
                </div>
              )}
            </>
          ) : (
            <>
              <div className="result-section">
                <h4>{t.answer}</h4>
                <p>{result.legal_analysis.answer}</p>
              </div>

              {result.legal_analysis.procedural_guidance && (
                <div className="result-section">
                  <h4>{t.guidance}</h4>
                  <p>{result.legal_analysis.procedural_guidance}</p>
                </div>
              )}
            </>
          )}

          <div className="result-section confidence">
            <p>
              <strong>{t.confidence}:</strong>{" "}
              {result.legal_analysis.confidence?.toUpperCase()}
            </p>
          </div>

          {result.audio && (
            <div className="result-section">
              <h4>üîä Audio Response</h4>
              <audio
                src={`http://localhost:5000${result.audio.url}`}
                controls
              />
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default UnifiedLegalApp;
